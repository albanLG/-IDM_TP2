/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.jppjson.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.jppjson.myDsl.AddElement;
import org.xtext.example.jppjson.myDsl.BinExp;
import org.xtext.example.jppjson.myDsl.EditElement;
import org.xtext.example.jppjson.myDsl.Element;
import org.xtext.example.jppjson.myDsl.JArray;
import org.xtext.example.jppjson.myDsl.JObject;
import org.xtext.example.jppjson.myDsl.JsonBoolean;
import org.xtext.example.jppjson.myDsl.JsonEmpty;
import org.xtext.example.jppjson.myDsl.JsonInteger;
import org.xtext.example.jppjson.myDsl.JsonString;
import org.xtext.example.jppjson.myDsl.Loadfile;
import org.xtext.example.jppjson.myDsl.MyDslPackage;
import org.xtext.example.jppjson.myDsl.Programme;
import org.xtext.example.jppjson.myDsl.RemoveElement;
import org.xtext.example.jppjson.myDsl.ToCSV;
import org.xtext.example.jppjson.myDsl.ToString;
import org.xtext.example.jppjson.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.ADD_ELEMENT:
				sequence_AddElement(context, (AddElement) semanticObject); 
				return; 
			case MyDslPackage.BIN_EXP:
				sequence_BinExp(context, (BinExp) semanticObject); 
				return; 
			case MyDslPackage.EDIT_ELEMENT:
				sequence_EditElement(context, (EditElement) semanticObject); 
				return; 
			case MyDslPackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case MyDslPackage.JARRAY:
				sequence_JArray(context, (JArray) semanticObject); 
				return; 
			case MyDslPackage.JOBJECT:
				sequence_JObject(context, (JObject) semanticObject); 
				return; 
			case MyDslPackage.JSON_BOOLEAN:
				sequence_JsonBoolean(context, (JsonBoolean) semanticObject); 
				return; 
			case MyDslPackage.JSON_EMPTY:
				sequence_JsonEmpty(context, (JsonEmpty) semanticObject); 
				return; 
			case MyDslPackage.JSON_INTEGER:
				sequence_JsonInteger(context, (JsonInteger) semanticObject); 
				return; 
			case MyDslPackage.JSON_STRING:
				sequence_JsonString(context, (JsonString) semanticObject); 
				return; 
			case MyDslPackage.LOADFILE:
				sequence_Loadfile(context, (Loadfile) semanticObject); 
				return; 
			case MyDslPackage.PROGRAMME:
				sequence_Programme(context, (Programme) semanticObject); 
				return; 
			case MyDslPackage.REMOVE_ELEMENT:
				sequence_RemoveElement(context, (RemoveElement) semanticObject); 
				return; 
			case MyDslPackage.TO_CSV:
				sequence_ToCSV(context, (ToCSV) semanticObject); 
				return; 
			case MyDslPackage.TO_STRING:
				sequence_ToString(context, (ToString) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Command returns AddElement
	 *     AddElement returns AddElement
	 *
	 * Constraint:
	 *     element=Element
	 */
	protected void sequence_AddElement(ISerializationContext context, AddElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ADD_ELEMENT__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ADD_ELEMENT__ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddElementAccess().getElementElementParserRuleCall_1_0(), semanticObject.getElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns BinExp
	 *     BinExp returns BinExp
	 *
	 * Constraint:
	 *     (val=STRING rval=STRING)
	 */
	protected void sequence_BinExp(ISerializationContext context, BinExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BIN_EXP__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BIN_EXP__VAL));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BIN_EXP__RVAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BIN_EXP__RVAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBinExpAccess().getValSTRINGTerminalRuleCall_0_0(), semanticObject.getVal());
		feeder.accept(grammarAccess.getBinExpAccess().getRvalSTRINGTerminalRuleCall_2_0(), semanticObject.getRval());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns EditElement
	 *     EditElement returns EditElement
	 *
	 * Constraint:
	 *     (key=STRING value=Expression)
	 */
	protected void sequence_EditElement(ISerializationContext context, EditElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EDIT_ELEMENT__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EDIT_ELEMENT__KEY));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EDIT_ELEMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EDIT_ELEMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEditElementAccess().getKeySTRINGTerminalRuleCall_1_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getEditElementAccess().getValueExpressionParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     (key=STRING value=Expression)
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ELEMENT__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ELEMENT__KEY));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ELEMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ELEMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementAccess().getKeySTRINGTerminalRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getElementAccess().getValueExpressionParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns JArray
	 *     Entity returns JArray
	 *     JArray returns JArray
	 *
	 * Constraint:
	 *     (expression+=Expression expression+=Expression*)
	 */
	protected void sequence_JArray(ISerializationContext context, JArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns JObject
	 *     Entity returns JObject
	 *     JObject returns JObject
	 *
	 * Constraint:
	 *     (element+=Element element+=Element*)
	 */
	protected void sequence_JObject(ISerializationContext context, JObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns JsonBoolean
	 *     Value returns JsonBoolean
	 *     JsonBoolean returns JsonBoolean
	 *
	 * Constraint:
	 *     (val='true' | val='false')
	 */
	protected void sequence_JsonBoolean(ISerializationContext context, JsonBoolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns JsonEmpty
	 *     Value returns JsonEmpty
	 *     JsonEmpty returns JsonEmpty
	 *
	 * Constraint:
	 *     val='null'
	 */
	protected void sequence_JsonEmpty(ISerializationContext context, JsonEmpty semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.JSON_EMPTY__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.JSON_EMPTY__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonEmptyAccess().getValNullKeyword_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns JsonInteger
	 *     Value returns JsonInteger
	 *     JsonInteger returns JsonInteger
	 *
	 * Constraint:
	 *     val=INT
	 */
	protected void sequence_JsonInteger(ISerializationContext context, JsonInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.JSON_INTEGER__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.JSON_INTEGER__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonIntegerAccess().getValINTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns JsonString
	 *     Value returns JsonString
	 *     JsonString returns JsonString
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_JsonString(ISerializationContext context, JsonString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.JSON_STRING__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.JSON_STRING__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonStringAccess().getValSTRINGTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Loadfile returns Loadfile
	 *
	 * Constraint:
	 *     (path=STRING commands+=Command*)
	 */
	protected void sequence_Loadfile(ISerializationContext context, Loadfile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Programme returns Programme
	 *
	 * Constraint:
	 *     loadfiles+=Loadfile+
	 */
	protected void sequence_Programme(ISerializationContext context, Programme semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns RemoveElement
	 *     RemoveElement returns RemoveElement
	 *
	 * Constraint:
	 *     key=STRING
	 */
	protected void sequence_RemoveElement(ISerializationContext context, RemoveElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.REMOVE_ELEMENT__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.REMOVE_ELEMENT__KEY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRemoveElementAccess().getKeySTRINGTerminalRuleCall_1_0(), semanticObject.getKey());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns ToCSV
	 *     ToCSV returns ToCSV
	 *
	 * Constraint:
	 *     path=STRING
	 */
	protected void sequence_ToCSV(ISerializationContext context, ToCSV semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TO_CSV__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TO_CSV__PATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getToCSVAccess().getPathSTRINGTerminalRuleCall_1_0(), semanticObject.getPath());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns ToString
	 *     ToString returns ToString
	 *
	 * Constraint:
	 *     path=STRING
	 */
	protected void sequence_ToString(ISerializationContext context, ToString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TO_STRING__PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TO_STRING__PATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getToStringAccess().getPathSTRINGTerminalRuleCall_1_0(), semanticObject.getPath());
		feeder.finish();
	}
	
	
}
