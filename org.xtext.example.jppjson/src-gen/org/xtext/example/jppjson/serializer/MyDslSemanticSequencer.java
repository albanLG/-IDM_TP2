/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.jppjson.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.jppjson.myDsl.BinExp;
import org.xtext.example.jppjson.myDsl.Element;
import org.xtext.example.jppjson.myDsl.JArray;
import org.xtext.example.jppjson.myDsl.JObject;
import org.xtext.example.jppjson.myDsl.JsonBoolean;
import org.xtext.example.jppjson.myDsl.JsonEmpty;
import org.xtext.example.jppjson.myDsl.JsonInteger;
import org.xtext.example.jppjson.myDsl.JsonString;
import org.xtext.example.jppjson.myDsl.MyDslPackage;
import org.xtext.example.jppjson.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.BIN_EXP:
				sequence_BinExp(context, (BinExp) semanticObject); 
				return; 
			case MyDslPackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case MyDslPackage.JARRAY:
				sequence_JArray(context, (JArray) semanticObject); 
				return; 
			case MyDslPackage.JOBJECT:
				sequence_JObject(context, (JObject) semanticObject); 
				return; 
			case MyDslPackage.JSON_BOOLEAN:
				sequence_JsonBoolean(context, (JsonBoolean) semanticObject); 
				return; 
			case MyDslPackage.JSON_EMPTY:
				sequence_JsonEmpty(context, (JsonEmpty) semanticObject); 
				return; 
			case MyDslPackage.JSON_INTEGER:
				sequence_JsonInteger(context, (JsonInteger) semanticObject); 
				return; 
			case MyDslPackage.JSON_STRING:
				sequence_JsonString(context, (JsonString) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expression returns BinExp
	 *     BinExp returns BinExp
	 *
	 * Constraint:
	 *     (val=STRING rval=STRING)
	 */
	protected void sequence_BinExp(ISerializationContext context, BinExp semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BIN_EXP__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BIN_EXP__VAL));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BIN_EXP__RVAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BIN_EXP__RVAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBinExpAccess().getValSTRINGTerminalRuleCall_0_0(), semanticObject.getVal());
		feeder.accept(grammarAccess.getBinExpAccess().getRvalSTRINGTerminalRuleCall_2_0(), semanticObject.getRval());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     (key=STRING value=Value)
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ELEMENT__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ELEMENT__KEY));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ELEMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ELEMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementAccess().getKeySTRINGTerminalRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getElementAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns JArray
	 *     Entity returns JArray
	 *     JArray returns JArray
	 *
	 * Constraint:
	 *     (expression+=Expression expression+=Expression*)
	 */
	protected void sequence_JArray(ISerializationContext context, JArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns JObject
	 *     Entity returns JObject
	 *     JObject returns JObject
	 *
	 * Constraint:
	 *     (element+=Element element+=Element*)
	 */
	protected void sequence_JObject(ISerializationContext context, JObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns JsonBoolean
	 *     Value returns JsonBoolean
	 *     JsonBoolean returns JsonBoolean
	 *
	 * Constraint:
	 *     (val='true' | val='false')
	 */
	protected void sequence_JsonBoolean(ISerializationContext context, JsonBoolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns JsonEmpty
	 *     Value returns JsonEmpty
	 *     JsonEmpty returns JsonEmpty
	 *
	 * Constraint:
	 *     val='null'
	 */
	protected void sequence_JsonEmpty(ISerializationContext context, JsonEmpty semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.JSON_EMPTY__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.JSON_EMPTY__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonEmptyAccess().getValNullKeyword_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns JsonInteger
	 *     Value returns JsonInteger
	 *     JsonInteger returns JsonInteger
	 *
	 * Constraint:
	 *     val=INT
	 */
	protected void sequence_JsonInteger(ISerializationContext context, JsonInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.JSON_INTEGER__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.JSON_INTEGER__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonIntegerAccess().getValINTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns JsonString
	 *     Value returns JsonString
	 *     JsonString returns JsonString
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_JsonString(ISerializationContext context, JsonString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.JSON_STRING__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.JSON_STRING__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonStringAccess().getValSTRINGTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
}
