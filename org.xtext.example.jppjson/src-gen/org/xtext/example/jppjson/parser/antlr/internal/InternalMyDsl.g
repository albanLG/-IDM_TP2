/*
 * generated by Xtext 2.25.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.jppjson.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.jppjson.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.jppjson.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Expression";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBinExpParserRuleCall_0());
		}
		this_BinExp_0=ruleBinExp
		{
			$current = $this_BinExp_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getValueParserRuleCall_1());
		}
		this_Value_1=ruleValue
		{
			$current = $this_Value_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getEntityParserRuleCall_2());
		}
		this_Entity_2=ruleEntity
		{
			$current = $this_Entity_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	iv_ruleEntity=ruleEntity
	{ $current=$iv_ruleEntity.current; }
	EOF;

// Rule Entity
ruleEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEntityAccess().getJObjectParserRuleCall_0());
		}
		this_JObject_0=ruleJObject
		{
			$current = $this_JObject_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEntityAccess().getJArrayParserRuleCall_1());
		}
		this_JArray_1=ruleJArray
		{
			$current = $this_JArray_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_key_0_0=RULE_STRING
				{
					newLeafNode(lv_key_0_0, grammarAccess.getElementAccess().getKeySTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getElementRule());
					}
					setWithLastConsumed(
						$current,
						"key",
						lv_key_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getElementAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElementAccess().getValueValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.xtext.example.jppjson.MyDsl.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValueAccess().getJsonStringParserRuleCall_0());
		}
		this_JsonString_0=ruleJsonString
		{
			$current = $this_JsonString_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getJsonBooleanParserRuleCall_1());
		}
		this_JsonBoolean_1=ruleJsonBoolean
		{
			$current = $this_JsonBoolean_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getJsonEmptyParserRuleCall_2());
		}
		this_JsonEmpty_2=ruleJsonEmpty
		{
			$current = $this_JsonEmpty_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getJsonIntegerParserRuleCall_3());
		}
		this_JsonInteger_3=ruleJsonInteger
		{
			$current = $this_JsonInteger_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleJsonString
entryRuleJsonString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonStringRule()); }
	iv_ruleJsonString=ruleJsonString
	{ $current=$iv_ruleJsonString.current; }
	EOF;

// Rule JsonString
ruleJsonString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_val_0_0=RULE_STRING
			{
				newLeafNode(lv_val_0_0, grammarAccess.getJsonStringAccess().getValSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getJsonStringRule());
				}
				setWithLastConsumed(
					$current,
					"val",
					lv_val_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleJsonBoolean
entryRuleJsonBoolean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonBooleanRule()); }
	iv_ruleJsonBoolean=ruleJsonBoolean
	{ $current=$iv_ruleJsonBoolean.current; }
	EOF;

// Rule JsonBoolean
ruleJsonBoolean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_val_0_1='true'
				{
					newLeafNode(lv_val_0_1, grammarAccess.getJsonBooleanAccess().getValTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJsonBooleanRule());
					}
					setWithLastConsumed($current, "val", lv_val_0_1, null);
				}
				    |
				lv_val_0_2='false'
				{
					newLeafNode(lv_val_0_2, grammarAccess.getJsonBooleanAccess().getValFalseKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJsonBooleanRule());
					}
					setWithLastConsumed($current, "val", lv_val_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleJsonEmpty
entryRuleJsonEmpty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonEmptyRule()); }
	iv_ruleJsonEmpty=ruleJsonEmpty
	{ $current=$iv_ruleJsonEmpty.current; }
	EOF;

// Rule JsonEmpty
ruleJsonEmpty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_val_0_0='null'
			{
				newLeafNode(lv_val_0_0, grammarAccess.getJsonEmptyAccess().getValNullKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getJsonEmptyRule());
				}
				setWithLastConsumed($current, "val", lv_val_0_0, "null");
			}
		)
	)
;

// Entry rule entryRuleJsonInteger
entryRuleJsonInteger returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJsonIntegerRule()); }
	iv_ruleJsonInteger=ruleJsonInteger
	{ $current=$iv_ruleJsonInteger.current; }
	EOF;

// Rule JsonInteger
ruleJsonInteger returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_val_0_0=RULE_INT
			{
				newLeafNode(lv_val_0_0, grammarAccess.getJsonIntegerAccess().getValINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getJsonIntegerRule());
				}
				setWithLastConsumed(
					$current,
					"val",
					lv_val_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleJObject
entryRuleJObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJObjectRule()); }
	iv_ruleJObject=ruleJObject
	{ $current=$iv_ruleJObject.current; }
	EOF;

// Rule JObject
ruleJObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getJObjectAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getJObjectAccess().getElementElementParserRuleCall_1_0_0());
					}
					lv_element_1_0=ruleElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJObjectRule());
						}
						add(
							$current,
							"element",
							lv_element_1_0,
							"org.xtext.example.jppjson.MyDsl.Element");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getJObjectAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getJObjectAccess().getElementElementParserRuleCall_1_1_1_0());
						}
						lv_element_3_0=ruleElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getJObjectRule());
							}
							add(
								$current,
								"element",
								lv_element_3_0,
								"org.xtext.example.jppjson.MyDsl.Element");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getJObjectAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleJArray
entryRuleJArray returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJArrayRule()); }
	iv_ruleJArray=ruleJArray
	{ $current=$iv_ruleJArray.current; }
	EOF;

// Rule JArray
ruleJArray returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getJArrayAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getJArrayAccess().getExpressionExpressionParserRuleCall_1_0_0());
					}
					lv_expression_1_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJArrayRule());
						}
						add(
							$current,
							"expression",
							lv_expression_1_0,
							"org.xtext.example.jppjson.MyDsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getJArrayAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getJArrayAccess().getExpressionExpressionParserRuleCall_1_1_1_0());
						}
						lv_expression_3_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getJArrayRule());
							}
							add(
								$current,
								"expression",
								lv_expression_3_0,
								"org.xtext.example.jppjson.MyDsl.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getJArrayAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleBinExp
entryRuleBinExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinExpRule()); }
	iv_ruleBinExp=ruleBinExp
	{ $current=$iv_ruleBinExp.current; }
	EOF;

// Rule BinExp
ruleBinExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_val_0_0=RULE_STRING
				{
					newLeafNode(lv_val_0_0, grammarAccess.getBinExpAccess().getValSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBinExpRule());
					}
					setWithLastConsumed(
						$current,
						"val",
						lv_val_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_1='+'
		{
			newLeafNode(otherlv_1, grammarAccess.getBinExpAccess().getPlusSignKeyword_1());
		}
		(
			(
				lv_rval_2_0=RULE_STRING
				{
					newLeafNode(lv_rval_2_0, grammarAccess.getBinExpAccess().getRvalSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBinExpRule());
					}
					setWithLastConsumed(
						$current,
						"rval",
						lv_rval_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
