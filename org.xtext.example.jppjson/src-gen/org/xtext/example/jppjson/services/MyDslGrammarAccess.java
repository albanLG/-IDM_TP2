/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.jppjson.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgrammeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.jppjson.MyDsl.Programme");
		private final Assignment cLoadfilesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLoadfilesLoadfileParserRuleCall_0 = (RuleCall)cLoadfilesAssignment.eContents().get(0);
		
		//Programme:
		//    loadfiles+=Loadfile*;
		@Override public ParserRule getRule() { return rule; }
		
		//loadfiles+=Loadfile*
		public Assignment getLoadfilesAssignment() { return cLoadfilesAssignment; }
		
		//Loadfile
		public RuleCall getLoadfilesLoadfileParserRuleCall_0() { return cLoadfilesLoadfileParserRuleCall_0; }
	}
	public class LoadfileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.jppjson.MyDsl.Loadfile");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLoadKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPathAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cPathAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cCommandsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cCommandsCommandParserRuleCall_0_4_0 = (RuleCall)cCommandsAssignment_0_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cWriteKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cCommandsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCommandsCommandParserRuleCall_1_2_0 = (RuleCall)cCommandsAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Loadfile :
		//    'Load('path=STRING')' '{' commands+=Command*'}' |
		//    'Write()' '{' commands+=Command* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Load('path=STRING')' '{' commands+=Command*'}' |
		//'Write()' '{' commands+=Command* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Load('path=STRING')' '{' commands+=Command*'}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'Load('
		public Keyword getLoadKeyword_0_0() { return cLoadKeyword_0_0; }
		
		//path=STRING
		public Assignment getPathAssignment_0_1() { return cPathAssignment_0_1; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_0_1_0() { return cPathSTRINGTerminalRuleCall_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_3() { return cLeftCurlyBracketKeyword_0_3; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_0_4() { return cCommandsAssignment_0_4; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_0_4_0() { return cCommandsCommandParserRuleCall_0_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_5() { return cRightCurlyBracketKeyword_0_5; }
		
		//'Write()' '{' commands+=Command* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'Write()'
		public Keyword getWriteKeyword_1_0() { return cWriteKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_1_2() { return cCommandsAssignment_1_2; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_1_2_0() { return cCommandsCommandParserRuleCall_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.jppjson.MyDsl.Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cReadParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cToStringParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cToJSONParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cToCSVParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Command :
		//     (  Read | ToString | ToJSON | ToCSV) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(  Read | ToString | ToJSON | ToCSV) ';'
		public Group getGroup() { return cGroup; }
		
		//(  Read | ToString | ToJSON | ToCSV)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Read
		public RuleCall getReadParserRuleCall_0_0() { return cReadParserRuleCall_0_0; }
		
		//ToString
		public RuleCall getToStringParserRuleCall_0_1() { return cToStringParserRuleCall_0_1; }
		
		//ToJSON
		public RuleCall getToJSONParserRuleCall_0_2() { return cToJSONParserRuleCall_0_2; }
		
		//ToCSV
		public RuleCall getToCSVParserRuleCall_0_3() { return cToCSVParserRuleCall_0_3; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ReadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.jppjson.MyDsl.Read");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Read:
		//    'Read('path=STRING')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Read('path=STRING')'
		public Group getGroup() { return cGroup; }
		
		//'Read('
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//path=STRING
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_1_0() { return cPathSTRINGTerminalRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ToStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.jppjson.MyDsl.ToString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ToString:
		//    'ExportString('path=STRING')';
		@Override public ParserRule getRule() { return rule; }
		
		//'ExportString('path=STRING')'
		public Group getGroup() { return cGroup; }
		
		//'ExportString('
		public Keyword getExportStringKeyword_0() { return cExportStringKeyword_0; }
		
		//path=STRING
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_1_0() { return cPathSTRINGTerminalRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ToJSONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.jppjson.MyDsl.ToJSON");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportJsonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ToJSON:
		//    'ExportJson('path=STRING')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ExportJson('path=STRING')'
		public Group getGroup() { return cGroup; }
		
		//'ExportJson('
		public Keyword getExportJsonKeyword_0() { return cExportJsonKeyword_0; }
		
		//path=STRING
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_1_0() { return cPathSTRINGTerminalRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ToCSVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.jppjson.MyDsl.ToCSV");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportCSVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ToCSV :
		//    'ExportCSV('path=STRING')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ExportCSV('path=STRING')'
		public Group getGroup() { return cGroup; }
		
		//'ExportCSV('
		public Keyword getExportCSVKeyword_0() { return cExportCSVKeyword_0; }
		
		//path=STRING
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_1_0() { return cPathSTRINGTerminalRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.jppjson.MyDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Expression:
		//    BinExp | Value | Entity;
		@Override public ParserRule getRule() { return rule; }
		
		//BinExp | Value | Entity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BinExp
		public RuleCall getBinExpParserRuleCall_0() { return cBinExpParserRuleCall_0; }
		
		//Value
		public RuleCall getValueParserRuleCall_1() { return cValueParserRuleCall_1; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_2() { return cEntityParserRuleCall_2; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.jppjson.MyDsl.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Entity:
		//    JObject|JArray;
		@Override public ParserRule getRule() { return rule; }
		
		//JObject|JArray
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JObject
		public RuleCall getJObjectParserRuleCall_0() { return cJObjectParserRuleCall_0; }
		
		//JArray
		public RuleCall getJArrayParserRuleCall_1() { return cJArrayParserRuleCall_1; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.jppjson.MyDsl.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Element:
		//    key=STRING ':' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//key=STRING ':' value=Expression
		public Group getGroup() { return cGroup; }
		
		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.jppjson.MyDsl.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJsonStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJsonBooleanParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJsonEmptyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cJsonIntegerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Value:
		//    JsonString | JsonBoolean | JsonEmpty | JsonInteger;
		@Override public ParserRule getRule() { return rule; }
		
		//JsonString | JsonBoolean | JsonEmpty | JsonInteger
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JsonString
		public RuleCall getJsonStringParserRuleCall_0() { return cJsonStringParserRuleCall_0; }
		
		//JsonBoolean
		public RuleCall getJsonBooleanParserRuleCall_1() { return cJsonBooleanParserRuleCall_1; }
		
		//JsonEmpty
		public RuleCall getJsonEmptyParserRuleCall_2() { return cJsonEmptyParserRuleCall_2; }
		
		//JsonInteger
		public RuleCall getJsonIntegerParserRuleCall_3() { return cJsonIntegerParserRuleCall_3; }
	}
	public class JsonStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.jppjson.MyDsl.JsonString");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//JsonString : val=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//val=STRING
		public Assignment getValAssignment() { return cValAssignment; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_0() { return cValSTRINGTerminalRuleCall_0; }
	}
	public class JsonBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.jppjson.MyDsl.JsonBoolean");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValAlternatives_0 = (Alternatives)cValAssignment.eContents().get(0);
		private final Keyword cValTrueKeyword_0_0 = (Keyword)cValAlternatives_0.eContents().get(0);
		private final Keyword cValFalseKeyword_0_1 = (Keyword)cValAlternatives_0.eContents().get(1);
		
		//JsonBoolean:
		//    val=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//val=('true' | 'false')
		public Assignment getValAssignment() { return cValAssignment; }
		
		//('true' | 'false')
		public Alternatives getValAlternatives_0() { return cValAlternatives_0; }
		
		//'true'
		public Keyword getValTrueKeyword_0_0() { return cValTrueKeyword_0_0; }
		
		//'false'
		public Keyword getValFalseKeyword_0_1() { return cValFalseKeyword_0_1; }
	}
	public class JsonEmptyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.jppjson.MyDsl.JsonEmpty");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValNullKeyword_0 = (Keyword)cValAssignment.eContents().get(0);
		
		//JsonEmpty:
		//    val='null';
		@Override public ParserRule getRule() { return rule; }
		
		//val='null'
		public Assignment getValAssignment() { return cValAssignment; }
		
		//'null'
		public Keyword getValNullKeyword_0() { return cValNullKeyword_0; }
	}
	public class JsonIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.jppjson.MyDsl.JsonInteger");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//JsonInteger : val=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//val=INT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}
	public class JObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.jppjson.MyDsl.JObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cElementElementParserRuleCall_1_0_0 = (RuleCall)cElementAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cElementAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cElementElementParserRuleCall_1_1_1_0 = (RuleCall)cElementAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//JObject:
		//    '{' ((element+=Element) (',' element+=Element)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' ((element+=Element) (',' element+=Element)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//((element+=Element) (',' element+=Element)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//(element+=Element)
		public Assignment getElementAssignment_1_0() { return cElementAssignment_1_0; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_1_0_0() { return cElementElementParserRuleCall_1_0_0; }
		
		//(',' element+=Element)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//element+=Element
		public Assignment getElementAssignment_1_1_1() { return cElementAssignment_1_1_1; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_1_1_1_0() { return cElementElementParserRuleCall_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class JArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.jppjson.MyDsl.JArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_0 = (RuleCall)cExpressionAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExpressionAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//JArray:
		//    '[' ((expression+=Expression) (',' expression+=Expression)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' ((expression+=Expression) (',' expression+=Expression)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//((expression+=Expression) (',' expression+=Expression)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//(expression+=Expression)
		public Assignment getExpressionAssignment_1_0() { return cExpressionAssignment_1_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_0() { return cExpressionExpressionParserRuleCall_1_0_0; }
		
		//(',' expression+=Expression)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_1_1_1() { return cExpressionAssignment_1_1_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class BinExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.jppjson.MyDsl.BinExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValSTRINGTerminalRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRvalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRvalSTRINGTerminalRuleCall_2_0 = (RuleCall)cRvalAssignment_2.eContents().get(0);
		
		//BinExp:
		//    val=STRING '+' rval=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//val=STRING '+' rval=STRING
		public Group getGroup() { return cGroup; }
		
		//val=STRING
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_0_0() { return cValSTRINGTerminalRuleCall_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
		
		//rval=STRING
		public Assignment getRvalAssignment_2() { return cRvalAssignment_2; }
		
		//STRING
		public RuleCall getRvalSTRINGTerminalRuleCall_2_0() { return cRvalSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private final ProgrammeElements pProgramme;
	private final LoadfileElements pLoadfile;
	private final CommandElements pCommand;
	private final ReadElements pRead;
	private final ToStringElements pToString;
	private final ToJSONElements pToJSON;
	private final ToCSVElements pToCSV;
	private final ExpressionElements pExpression;
	private final EntityElements pEntity;
	private final ElementElements pElement;
	private final ValueElements pValue;
	private final JsonStringElements pJsonString;
	private final JsonBooleanElements pJsonBoolean;
	private final JsonEmptyElements pJsonEmpty;
	private final JsonIntegerElements pJsonInteger;
	private final JObjectElements pJObject;
	private final JArrayElements pJArray;
	private final BinExpElements pBinExp;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgramme = new ProgrammeElements();
		this.pLoadfile = new LoadfileElements();
		this.pCommand = new CommandElements();
		this.pRead = new ReadElements();
		this.pToString = new ToStringElements();
		this.pToJSON = new ToJSONElements();
		this.pToCSV = new ToCSVElements();
		this.pExpression = new ExpressionElements();
		this.pEntity = new EntityElements();
		this.pElement = new ElementElements();
		this.pValue = new ValueElements();
		this.pJsonString = new JsonStringElements();
		this.pJsonBoolean = new JsonBooleanElements();
		this.pJsonEmpty = new JsonEmptyElements();
		this.pJsonInteger = new JsonIntegerElements();
		this.pJObject = new JObjectElements();
		this.pJArray = new JArrayElements();
		this.pBinExp = new BinExpElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.jppjson.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Programme:
	//    loadfiles+=Loadfile*;
	public ProgrammeElements getProgrammeAccess() {
		return pProgramme;
	}
	
	public ParserRule getProgrammeRule() {
		return getProgrammeAccess().getRule();
	}
	
	//Loadfile :
	//    'Load('path=STRING')' '{' commands+=Command*'}' |
	//    'Write()' '{' commands+=Command* '}';
	public LoadfileElements getLoadfileAccess() {
		return pLoadfile;
	}
	
	public ParserRule getLoadfileRule() {
		return getLoadfileAccess().getRule();
	}
	
	//Command :
	//     (  Read | ToString | ToJSON | ToCSV) ';';
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Read:
	//    'Read('path=STRING')';
	public ReadElements getReadAccess() {
		return pRead;
	}
	
	public ParserRule getReadRule() {
		return getReadAccess().getRule();
	}
	
	//ToString:
	//    'ExportString('path=STRING')';
	public ToStringElements getToStringAccess() {
		return pToString;
	}
	
	public ParserRule getToStringRule() {
		return getToStringAccess().getRule();
	}
	
	//ToJSON:
	//    'ExportJson('path=STRING')'
	//;
	public ToJSONElements getToJSONAccess() {
		return pToJSON;
	}
	
	public ParserRule getToJSONRule() {
		return getToJSONAccess().getRule();
	}
	
	//ToCSV :
	//    'ExportCSV('path=STRING')'
	//;
	public ToCSVElements getToCSVAccess() {
		return pToCSV;
	}
	
	public ParserRule getToCSVRule() {
		return getToCSVAccess().getRule();
	}
	
	//Expression:
	//    BinExp | Value | Entity;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Entity:
	//    JObject|JArray;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Element:
	//    key=STRING ':' value=Expression;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Value:
	//    JsonString | JsonBoolean | JsonEmpty | JsonInteger;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//JsonString : val=STRING;
	public JsonStringElements getJsonStringAccess() {
		return pJsonString;
	}
	
	public ParserRule getJsonStringRule() {
		return getJsonStringAccess().getRule();
	}
	
	//JsonBoolean:
	//    val=('true' | 'false');
	public JsonBooleanElements getJsonBooleanAccess() {
		return pJsonBoolean;
	}
	
	public ParserRule getJsonBooleanRule() {
		return getJsonBooleanAccess().getRule();
	}
	
	//JsonEmpty:
	//    val='null';
	public JsonEmptyElements getJsonEmptyAccess() {
		return pJsonEmpty;
	}
	
	public ParserRule getJsonEmptyRule() {
		return getJsonEmptyAccess().getRule();
	}
	
	//JsonInteger : val=INT;
	public JsonIntegerElements getJsonIntegerAccess() {
		return pJsonInteger;
	}
	
	public ParserRule getJsonIntegerRule() {
		return getJsonIntegerAccess().getRule();
	}
	
	//JObject:
	//    '{' ((element+=Element) (',' element+=Element)*)? '}';
	public JObjectElements getJObjectAccess() {
		return pJObject;
	}
	
	public ParserRule getJObjectRule() {
		return getJObjectAccess().getRule();
	}
	
	//JArray:
	//    '[' ((expression+=Expression) (',' expression+=Expression)*)? ']';
	public JArrayElements getJArrayAccess() {
		return pJArray;
	}
	
	public ParserRule getJArrayRule() {
		return getJArrayAccess().getRule();
	}
	
	//BinExp:
	//    val=STRING '+' rval=STRING;
	public BinExpElements getBinExpAccess() {
		return pBinExp;
	}
	
	public ParserRule getBinExpRule() {
		return getBinExpAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
