/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.jppjson.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.jppjson.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.jppjson.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCommandAccess().getAlternatives_0(), "rule__Command__Alternatives_0");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getEntityAccess().getAlternatives(), "rule__Entity__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getJsonBooleanAccess().getValAlternatives_0(), "rule__JsonBoolean__ValAlternatives_0");
			builder.put(grammarAccess.getLoadfileAccess().getGroup(), "rule__Loadfile__Group__0");
			builder.put(grammarAccess.getCommandAccess().getGroup(), "rule__Command__Group__0");
			builder.put(grammarAccess.getReadAccess().getGroup(), "rule__Read__Group__0");
			builder.put(grammarAccess.getAddElementAccess().getGroup(), "rule__AddElement__Group__0");
			builder.put(grammarAccess.getRemoveElementAccess().getGroup(), "rule__RemoveElement__Group__0");
			builder.put(grammarAccess.getEditObjectAccess().getGroup(), "rule__EditObject__Group__0");
			builder.put(grammarAccess.getToStringAccess().getGroup(), "rule__ToString__Group__0");
			builder.put(grammarAccess.getToCSVAccess().getGroup(), "rule__ToCSV__Group__0");
			builder.put(grammarAccess.getElementAccess().getGroup(), "rule__Element__Group__0");
			builder.put(grammarAccess.getJObjectAccess().getGroup(), "rule__JObject__Group__0");
			builder.put(grammarAccess.getJObjectAccess().getGroup_1(), "rule__JObject__Group_1__0");
			builder.put(grammarAccess.getJObjectAccess().getGroup_1_1(), "rule__JObject__Group_1_1__0");
			builder.put(grammarAccess.getJArrayAccess().getGroup(), "rule__JArray__Group__0");
			builder.put(grammarAccess.getJArrayAccess().getGroup_1(), "rule__JArray__Group_1__0");
			builder.put(grammarAccess.getJArrayAccess().getGroup_1_1(), "rule__JArray__Group_1_1__0");
			builder.put(grammarAccess.getBinExpAccess().getGroup(), "rule__BinExp__Group__0");
			builder.put(grammarAccess.getProgrammeAccess().getLoadfilesAssignment(), "rule__Programme__LoadfilesAssignment");
			builder.put(grammarAccess.getLoadfileAccess().getPathAssignment_1(), "rule__Loadfile__PathAssignment_1");
			builder.put(grammarAccess.getLoadfileAccess().getCommandsAssignment_4(), "rule__Loadfile__CommandsAssignment_4");
			builder.put(grammarAccess.getReadAccess().getPathAssignment_1(), "rule__Read__PathAssignment_1");
			builder.put(grammarAccess.getAddElementAccess().getElementAssignment_1(), "rule__AddElement__ElementAssignment_1");
			builder.put(grammarAccess.getRemoveElementAccess().getKeyAssignment_1(), "rule__RemoveElement__KeyAssignment_1");
			builder.put(grammarAccess.getEditObjectAccess().getKeyAssignment_1(), "rule__EditObject__KeyAssignment_1");
			builder.put(grammarAccess.getEditObjectAccess().getValueAssignment_3(), "rule__EditObject__ValueAssignment_3");
			builder.put(grammarAccess.getToStringAccess().getPathAssignment_1(), "rule__ToString__PathAssignment_1");
			builder.put(grammarAccess.getToCSVAccess().getPathAssignment_1(), "rule__ToCSV__PathAssignment_1");
			builder.put(grammarAccess.getElementAccess().getKeyAssignment_0(), "rule__Element__KeyAssignment_0");
			builder.put(grammarAccess.getElementAccess().getValueAssignment_2(), "rule__Element__ValueAssignment_2");
			builder.put(grammarAccess.getJsonStringAccess().getValAssignment(), "rule__JsonString__ValAssignment");
			builder.put(grammarAccess.getJsonBooleanAccess().getValAssignment(), "rule__JsonBoolean__ValAssignment");
			builder.put(grammarAccess.getJsonEmptyAccess().getValAssignment(), "rule__JsonEmpty__ValAssignment");
			builder.put(grammarAccess.getJsonIntegerAccess().getValAssignment(), "rule__JsonInteger__ValAssignment");
			builder.put(grammarAccess.getJObjectAccess().getElementAssignment_1_0(), "rule__JObject__ElementAssignment_1_0");
			builder.put(grammarAccess.getJObjectAccess().getElementAssignment_1_1_1(), "rule__JObject__ElementAssignment_1_1_1");
			builder.put(grammarAccess.getJArrayAccess().getExpressionAssignment_1_0(), "rule__JArray__ExpressionAssignment_1_0");
			builder.put(grammarAccess.getJArrayAccess().getExpressionAssignment_1_1_1(), "rule__JArray__ExpressionAssignment_1_1_1");
			builder.put(grammarAccess.getBinExpAccess().getValAssignment_0(), "rule__BinExp__ValAssignment_0");
			builder.put(grammarAccess.getBinExpAccess().getRvalAssignment_2(), "rule__BinExp__RvalAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
